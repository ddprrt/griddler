
// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
@mixin clearfix() {
	&:before,
	&:after {
		content: " "; /* 1 */
		display: table; /* 2 */
	}
	&:after {
		clear: both;
	}
}

// Grid System
// -----------

// Centered container element
@mixin container-fixed() {
	margin-right: auto;
	margin-left: auto;
	padding-left:  ($grid-gutter-width / 2);
	padding-right: ($grid-gutter-width / 2);
	@include clearfix();
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
	margin-left:  ($gutter / -2);
	margin-right: ($gutter / -2);
	@include clearfix();
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
	position: relative;
	float: left;
	width: percentage(($columns / $grid-columns));
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left:  ($gutter / 2);
	padding-right: ($gutter / 2);
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left:  ($gutter / 2);
	padding-right: ($gutter / 2);

	// Calculate width based on number of columns available
	@media (min-width: $screen-sm-min) {
		float: left;
		width: percentage(($columns / $grid-columns));
	}
}

// Generate the small column offsets
@mixin make-sm-column-offset($columns) {
	@media (min-width: $screen-sm-min) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-sm-column-push($columns) {
	@media (min-width: $screen-sm-min) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-sm-column-pull($columns) {
	@media (min-width: $screen-sm-min) {
		right: percentage(($columns / $grid-columns));
	}
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left:  ($gutter / 2);
	padding-right: ($gutter / 2);

	// Calculate width based on number of columns available
	@media (min-width: $screen-md-min) {
		float: left;
		width: percentage(($columns / $grid-columns));
	}
}

// Generate the medium column offsets
@mixin make-md-column-offset($columns) {
	@media (min-width: $screen-md-min) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-md-column-push($columns) {
	@media (min-width: $screen-md) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-md-column-pull($columns) {
	@media (min-width: $screen-md-min) {
		right: percentage(($columns / $grid-columns));
	}
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left:  ($gutter / 2);
	padding-right: ($gutter / 2);

	// Calculate width based on number of columns available
	@media (min-width: $screen-lg-min) {
		float: left;
		width: percentage(($columns / $grid-columns));
	}
}

// Generate the large column offsets
@mixin make-lg-column-offset($columns) {
	@media (min-width: $screen-lg-min) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-lg-column-push($columns) {
	@media (min-width: $screen-lg-min) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-lg-column-pull($columns) {
	@media (min-width: $screen-lg-min) {
		right: percentage(($columns / $grid-columns));
	}
}



// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] Grid converted to use SASS cycles (LESS uses recursive nested mixin defs not supported by SASS)
@mixin make-grid-columns() {
	%grid-column {
		position: relative;
		// Prevent columns from collapsing when empty
		min-height: 1px;
		// Inner gutter via padding
		padding-left:  ($grid-gutter-width / 2);
		padding-right: ($grid-gutter-width / 2);
	}

	@if($use-silent == false) {
		$list: '';
		$i: 1;
		$list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
		@for $i from 2 through $grid-columns {
			$list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, #{$list}";
		}
		#{$list} {
			@extend %grid-column;
		}
	}
}


// [converter] Grid converted to use SASS cycles (LESS uses recursive nested mixin defs not supported by SASS)
@mixin make-grid-columns-float($class) {
	%grid-column-float {
		float: left;
	}
	@if($use-silent == false) {
		$list: '';
		$i: 1;
		$list: ".col-#{$class}-#{$i}";
		@for $i from 2 through $grid-columns {
			$list: ".col-#{$class}-#{$i}, #{$list}";
		}
		#{$list} {
			float: left;
		}
	}
}


@mixin calc-grid($index, $class, $type) {
	@if ($type == width) and ($index > 0) {
		%col-#{$class}-#{$index} {
			width: percentage(($index / $grid-columns));
		}
		@if($use-silent == false) {
			.col-#{$class}-#{$index} {
				@extend %col-#{$class}-#{$index};
			}
		}
	}
	@if ($type == push) {
		%col-#{$class}-push-#{$index} {
			left: percentage(($index / $grid-columns));
		}
		@if($use-silent == false) {
			.col-#{$class}-push-#{$index}  {
				@extend %col-#{$class}-push-#{$index};
			}
		}
	}
	@if ($type == pull) {
		%col-#{$class}-pull-#{$index} {
			right: percentage(($index / $grid-columns));
		}
		@if($use-silent == false) {
			.col-#{$class}-push-#{$index}  {
				@extend %col-#{$class}-pull-#{$index};
			}
		}
	}
	@if ($type == offset) {
		%col-#{$class}-offset-#{$index} {
			margin-left: percentage(($index / $grid-columns));
		}
		@if($use-silent == false) {
			.col-#{$class}-offset-#{$index}  {
				@extend %col-#{$class}-offset-#{$index};
			}
		}
	}
}

// [converter] This is defined recursively in LESS, but SASS supports real loops
@mixin make-grid($columns, $class, $type) {
	@for $i from 0 through $columns {
		@include calc-grid($i, $class, $type);
	}
}
